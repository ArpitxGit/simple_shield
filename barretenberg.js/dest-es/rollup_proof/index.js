import { createHash } from 'crypto';
import { numToUInt32BE } from '../serialize';
import { ViewingKey } from '../viewing_key';
export class InnerProofData {
    constructor(proofId, publicInput, publicOutput, assetId, newNote1, newNote2, nullifier1, nullifier2, inputOwner, outputOwner) {
        this.proofId = proofId;
        this.publicInput = publicInput;
        this.publicOutput = publicOutput;
        this.assetId = assetId;
        this.newNote1 = newNote1;
        this.newNote2 = newNote2;
        this.nullifier1 = nullifier1;
        this.nullifier2 = nullifier2;
        this.inputOwner = inputOwner;
        this.outputOwner = outputOwner;
        this.txId = createHash('sha256').update(this.toBuffer()).digest();
    }
    getDepositSigningData() {
        return this.toBuffer();
    }
    toBuffer() {
        return Buffer.concat([
            numToUInt32BE(this.proofId, 32),
            this.publicInput,
            this.publicOutput,
            this.assetId,
            this.newNote1,
            this.newNote2,
            this.nullifier1,
            this.nullifier2,
            this.inputOwner,
            this.outputOwner,
        ]);
    }
    isPadding() {
        return this.nullifier1.equals(Buffer.alloc(32, 0));
    }
    static fromBuffer(innerPublicInputs) {
        const proofId = innerPublicInputs.readUInt32BE(0 * 32 + 28);
        const publicInput = innerPublicInputs.slice(1 * 32, 1 * 32 + 32);
        const publicOutput = innerPublicInputs.slice(2 * 32, 2 * 32 + 32);
        const assetId = innerPublicInputs.slice(3 * 32, 3 * 32 + 32);
        const newNote1 = innerPublicInputs.slice(4 * 32, 4 * 32 + 64);
        const newNote2 = innerPublicInputs.slice(6 * 32, 6 * 32 + 64);
        const nullifier1 = innerPublicInputs.slice(8 * 32, 8 * 32 + 32);
        const nullifier2 = innerPublicInputs.slice(9 * 32, 9 * 32 + 32);
        const inputOwner = innerPublicInputs.slice(10 * 32, 10 * 32 + 32);
        const outputOwner = innerPublicInputs.slice(11 * 32, 11 * 32 + 32);
        return new InnerProofData(proofId, publicInput, publicOutput, assetId, newNote1, newNote2, nullifier1, nullifier2, inputOwner, outputOwner);
    }
}
InnerProofData.NUM_PUBLIC_INPUTS = 12;
InnerProofData.LENGTH = InnerProofData.NUM_PUBLIC_INPUTS * 32;
export class RollupProofData {
    constructor(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, totalTxFees, numTxs, innerProofData, recursiveProofOutput, viewingKeys) {
        this.rollupId = rollupId;
        this.rollupSize = rollupSize;
        this.dataStartIndex = dataStartIndex;
        this.oldDataRoot = oldDataRoot;
        this.newDataRoot = newDataRoot;
        this.oldNullRoot = oldNullRoot;
        this.newNullRoot = newNullRoot;
        this.oldDataRootsRoot = oldDataRootsRoot;
        this.newDataRootsRoot = newDataRootsRoot;
        this.totalTxFees = totalTxFees;
        this.numTxs = numTxs;
        this.innerProofData = innerProofData;
        this.recursiveProofOutput = recursiveProofOutput;
        this.viewingKeys = viewingKeys;
        const allTxIds = this.innerProofData.map(innerProof => innerProof.txId);
        this.rollupHash = createHash('sha256').update(Buffer.concat(allTxIds)).digest();
        if (totalTxFees.length !== RollupProofData.NUMBER_OF_ASSETS) {
            throw new Error(`Expect totalTxFees to be an array of size ${RollupProofData.NUMBER_OF_ASSETS}.`);
        }
    }
    toBuffer() {
        return Buffer.concat([
            numToUInt32BE(this.rollupId, 32),
            numToUInt32BE(this.rollupSize, 32),
            numToUInt32BE(this.dataStartIndex, 32),
            this.oldDataRoot,
            this.newDataRoot,
            this.oldNullRoot,
            this.newNullRoot,
            this.oldDataRootsRoot,
            this.newDataRootsRoot,
            ...this.totalTxFees,
            numToUInt32BE(this.numTxs, 32),
            ...this.innerProofData.map(p => p.toBuffer()),
            this.recursiveProofOutput,
        ]);
    }
    getViewingKeyData() {
        return Buffer.concat(this.viewingKeys.flat().map(vk => vk.toBuffer()));
    }
    static getRollupIdFromBuffer(proofData) {
        return proofData.readUInt32BE(28);
    }
    static getRollupSizeFromBuffer(proofData) {
        return proofData.readUInt32BE(32 + 28);
    }
    static fromBuffer(proofData, viewingKeyData) {
        const rollupId = RollupProofData.getRollupIdFromBuffer(proofData);
        const rollupSize = proofData.readUInt32BE(1 * 32 + 28);
        const dataStartIndex = proofData.readUInt32BE(2 * 32 + 28);
        const oldDataRoot = proofData.slice(3 * 32, 3 * 32 + 32);
        const newDataRoot = proofData.slice(4 * 32, 4 * 32 + 32);
        const oldNullRoot = proofData.slice(5 * 32, 5 * 32 + 32);
        const newNullRoot = proofData.slice(6 * 32, 6 * 32 + 32);
        const oldDataRootsRoot = proofData.slice(7 * 32, 7 * 32 + 32);
        const newDataRootsRoot = proofData.slice(8 * 32, 8 * 32 + 32);
        const totalTxFees = [];
        for (let i = 0; i < RollupProofData.NUMBER_OF_ASSETS; ++i) {
            totalTxFees.push(proofData.slice((9 + i) * 32, (9 + i) * 32 + 32));
        }
        const numTxs = proofData.readUInt32BE((9 + RollupProofData.NUMBER_OF_ASSETS) * 32 + 28);
        const innerProofSize = Math.max(rollupSize, 1); // Escape hatch is demarked 0, but has size 1.
        const innerProofData = [];
        for (let i = 0; i < innerProofSize; ++i) {
            const startIndex = RollupProofData.LENGTH_ROLLUP_PUBLIC + i * InnerProofData.LENGTH;
            const innerData = proofData.slice(startIndex, startIndex + InnerProofData.LENGTH);
            innerProofData[i] = InnerProofData.fromBuffer(innerData);
        }
        // Populate j/s tx viewingKey data.
        const viewingKeys = [];
        if (viewingKeyData) {
            for (let i = 0, jsCount = 0; i < innerProofSize; ++i) {
                if (innerProofData[i].proofId === 0 && !innerProofData[i].isPadding()) {
                    const offset = jsCount * ViewingKey.SIZE * 2;
                    const vk1 = new ViewingKey(viewingKeyData.slice(offset, offset + ViewingKey.SIZE));
                    const vk2 = new ViewingKey(viewingKeyData.slice(offset + ViewingKey.SIZE, offset + ViewingKey.SIZE * 2));
                    jsCount++;
                    viewingKeys.push([vk1, vk2]);
                }
                else {
                    viewingKeys.push([ViewingKey.EMPTY, ViewingKey.EMPTY]);
                }
            }
        }
        const recursiveStartIndex = RollupProofData.LENGTH_ROLLUP_PUBLIC + innerProofSize * InnerProofData.LENGTH;
        const recursiveProofOutput = proofData.slice(recursiveStartIndex, recursiveStartIndex + 16 * 32);
        return new RollupProofData(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, totalTxFees, numTxs, innerProofData, recursiveProofOutput, viewingKeys);
    }
}
RollupProofData.NUMBER_OF_ASSETS = 4;
RollupProofData.NUM_ROLLUP_PUBLIC_INPUTS = 14;
RollupProofData.LENGTH_ROLLUP_PUBLIC = RollupProofData.NUM_ROLLUP_PUBLIC_INPUTS * 32;
//# sourceMappingURL=data:application/json;base64,