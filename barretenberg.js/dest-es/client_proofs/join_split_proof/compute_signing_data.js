import { toBufferBE } from 'bigint-buffer';
import { numToUInt32BE } from '../../serialize';
export function computeSigningData(notes, inputNote1Index, inputNote2Index, inputOwner, outputOwner, inputValue, outputValue, assetId, numInputNotes, nullifierKey, pedersen, noteAlgos) {
    const encryptedNotes = notes.map(note => noteAlgos.encryptNote(note.toBuffer()));
    const nullifier1 = noteAlgos.computeNoteNullifier(encryptedNotes[0], inputNote1Index, nullifierKey, numInputNotes >= 1);
    const nullifier2 = noteAlgos.computeNoteNullifier(encryptedNotes[1], inputNote2Index, nullifierKey, numInputNotes >= 2);
    const totalInputValue = notes[0].value + notes[1].value + inputValue;
    const totalOutputValue = notes[2].value + notes[3].value + outputValue;
    const txFee = totalInputValue - totalOutputValue;
    const toCompress = [
        toBufferBE(inputValue, 32),
        toBufferBE(outputValue, 32),
        numToUInt32BE(assetId, 32),
        ...encryptedNotes
            .slice(2)
            .map(note => [note.slice(0, 32), note.slice(32, 64)])
            .flat(),
        nullifier1,
        nullifier2,
        Buffer.concat([Buffer.alloc(12), inputOwner.toBuffer()]),
        Buffer.concat([Buffer.alloc(12), outputOwner.toBuffer()]),
        toBufferBE(txFee, 32),
    ];
    return pedersen.compressInputs(toCompress);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZV9zaWduaW5nX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9qb2luX3NwbGl0X3Byb29mL2NvbXB1dGVfc2lnbmluZ19kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR2hELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsS0FBaUIsRUFDakIsZUFBdUIsRUFDdkIsZUFBdUIsRUFDdkIsVUFBc0IsRUFDdEIsV0FBdUIsRUFDdkIsVUFBa0IsRUFDbEIsV0FBbUIsRUFDbkIsT0FBZ0IsRUFDaEIsYUFBcUIsRUFDckIsWUFBb0IsRUFDcEIsUUFBa0IsRUFDbEIsU0FBeUI7SUFFekIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVqRixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsb0JBQW9CLENBQy9DLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFDakIsZUFBZSxFQUNmLFlBQVksRUFDWixhQUFhLElBQUksQ0FBQyxDQUNuQixDQUFDO0lBQ0YsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixDQUMvQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQ2pCLGVBQWUsRUFDZixZQUFZLEVBQ1osYUFBYSxJQUFJLENBQUMsQ0FDbkIsQ0FBQztJQUVGLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7SUFDckUsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO0lBQ3ZFLE1BQU0sS0FBSyxHQUFHLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRztRQUNqQixVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztRQUMxQixVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztRQUMzQixhQUFhLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUMxQixHQUFHLGNBQWM7YUFDZCxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BELElBQUksRUFBRTtRQUNULFVBQVU7UUFDVixVQUFVO1FBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDekQsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7S0FDdEIsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM3QyxDQUFDIn0=